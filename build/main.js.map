{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.3.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport Json2iob from \"./lib/json2iob\";\nimport { MyEnergi } from \"./lib/myenergi-api\";\n\nclass Myenergi extends utils.Adapter {\n  private devices: { [key: string]: any };\n  private deviceObjects: { [key: string]: any };\n  private json2iob: Json2iob;\n  private hub: MyEnergi;\n  updateInterval: any = null;\n  reLoginTimeout: any = null;\n  refreshTokenTimeout: any = null;\n  session: any = {};\n  refreshTimeout: any;\n  refreshTokenInterval: any;\n  termId: any;\n  public constructor(options: Partial<utils.AdapterOptions> = {}) {\n    super({\n      ...options,\n      name: \"myenergi\",\n    });\n    this.on(\"ready\", this.onReady.bind(this));\n    this.on(\"stateChange\", this.onStateChange.bind(this));\n    this.on(\"unload\", this.onUnload.bind(this));\n    this.devices = {};\n    this.deviceObjects = {};\n    this.json2iob = new Json2iob(this);\n  }\n\n  /**\n   * Is called when databases are connected and adapter received configuration.\n   */\n  private async onReady(): Promise<void> {\n    this.setState(\"info.connection\", false, true);\n    if (this.config.interval < 0.5) {\n      this.log.info(\"Set interval to minimum 0.5\");\n      this.config.interval = 0.5;\n    }\n    if (!this.config.username || !this.config.password) {\n      this.log.error(\"Please set username and password in the instance settings\");\n      return;\n    }\n\n    this.updateInterval = null;\n    this.reLoginTimeout = null;\n    this.refreshTokenTimeout = null;\n    this.session = {};\n    this.subscribeStates(\"*\");\n\n    this.log.info(\"Login myenergi\");\n    this.hub = new MyEnergi(this.config.username, this.config.password);\n    await this.login();\n    if (this.session.token) {\n      await this.getDeviceList();\n\n      await this.updateDevices();\n      this.updateInterval = setInterval(async () => {\n        await this.updateDevices();\n      }, this.config.interval * 1000);\n    }\n  }\n\n  async getDeviceList(): Promise<void> {\n    await this.requestClient({}).then(async (res) => {\n      this.log.debug(JSON.stringify(res.data));\n      if (res.data.error_code) {\n        this.log.error(JSON.stringify(res.data));\n        return;\n      }\n      this.log.info(`Found ${res.data.result?.totalNum} devices`);\n\n      for (const device of res.data.result?.deviceList) {\n        const id = device.deviceId;\n        this.devices[id] = device;\n        let name = device.alias;\n        if (this.isBase64(device.alias)) {\n          name = Buffer.from(device.alias, \"base64\").toString(\"utf8\");\n        }\n\n        await this.setObjectNotExistsAsync(id, {\n          type: \"device\",\n          common: {\n            name: name,\n          },\n          native: {},\n        });\n        await this.setObjectNotExistsAsync(id + \".remote\", {\n          type: \"channel\",\n          common: {\n            name: \"Remote Controls\",\n          },\n          native: {},\n        });\n\n        const remoteArray = [\n          { command: \"refresh\", name: \"True = Refresh\" },\n          { command: \"setPowerState\", name: \"True = On, False = Off\" },\n          { command: \"setAlertConfig\", name: \"True = On, False = Off\" },\n          { command: \"setLensMaskConfig\", name: \"True = On, False = Off\" },\n          {\n            command: \"setBrightness\",\n            name: \"Set Brightness for Light devices\",\n            type: \"number\",\n            role: \"level.brightness\",\n            def: 5,\n          },\n          {\n            command: \"setColorTemp\",\n            name: \"Set Color Temp for Light devices\",\n            type: \"number\",\n            role: \"level.color.temperature\",\n            def: 3000,\n          },\n          {\n            command: \"setColor\",\n            name: \"Set Color for Light devices (hue, saturation)\",\n            def: \"30, 100\",\n            type: \"string\",\n          },\n        ];\n        remoteArray.forEach((remote) => {\n          this.setObjectNotExists(id + \".remote.\" + remote.command, {\n            type: \"state\",\n            common: {\n              name: remote.name || \"\",\n              type: remote.type || \"boolean\",\n              role: remote.role || \"boolean\",\n              def: remote.def || false,\n              write: true,\n              read: true,\n            },\n            native: {},\n          });\n        });\n        this.json2iob.parse(id, device);\n      }\n    });\n  }\n\n  async updateDevices(): Promise<void> {\n    try {\n      for (const deviceId in this.deviceObjects) {\n        if (!this.deviceObjects[deviceId]._connected) {\n          continue;\n        }\n        this.deviceObjects[deviceId]\n          .getDeviceInfo()\n          .then(async (sysInfo: any) => {\n            this.log.debug(JSON.stringify(sysInfo));\n            if (!sysInfo || sysInfo.name === \"Error\" || sysInfo.request) {\n              this.log.debug(\"Malformed response sysinfo\");\n              // this.log.error(JSON.stringify(sysInfo));\n              return;\n            }\n            await this.json2iob.parse(deviceId, sysInfo);\n            if (this.deviceObjects[deviceId].getEnergyUsage) {\n              this.log.debug(\"Receive energy usage\");\n              const energyUsage = await this.deviceObjects[deviceId].getEnergyUsage();\n              this.log.debug(JSON.stringify(energyUsage));\n              if (energyUsage.request) {\n                this.log.error(\"Malformed response getEnergyUsage\");\n                this.log.error(JSON.stringify(energyUsage));\n                return;\n              }\n              await this.json2iob.parse(deviceId, energyUsage);\n              const power_usage = this.deviceObjects[deviceId].getPowerConsumption();\n              if (power_usage.request) {\n                this.log.error(\"Malformed response getPowerConsumption\");\n                this.log.error(JSON.stringify(power_usage));\n                return;\n              }\n              await this.json2iob.parse(deviceId, power_usage);\n            }\n          })\n          .catch((error) => {\n            this.log.error(`Get Device Info failed for ${deviceId} - ${error}`);\n          });\n      }\n    } catch (error) {\n      this.log.error(error);\n    }\n  }\n\n  async sleep(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n  async refreshToken(): Promise<void> {\n    this.log.debug(\"Refresh token\");\n  }\n  /**\n   * Is called when adapter shuts down - callback has to be called under any circumstances!\n   */\n  private onUnload(callback: () => void): void {\n    try {\n      this.setState(\"info.connection\", false, true);\n      this.refreshTimeout && clearTimeout(this.refreshTimeout);\n      this.reLoginTimeout && clearTimeout(this.reLoginTimeout);\n      this.refreshTokenTimeout && clearTimeout(this.refreshTokenTimeout);\n      this.updateInterval && clearInterval(this.updateInterval);\n      this.refreshTokenInterval && clearInterval(this.refreshTokenInterval);\n\n      callback();\n    } catch (e) {\n      callback();\n    }\n  }\n\n  /**\n   * Is called if a subscribed state changes\n   */\n  private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n    if (state) {\n      if (!state.ack) {\n        const deviceId = id.split(\".\")[2];\n        const command = id.split(\".\")[4];\n        if (id.split(\".\")[3] !== \"remote\") {\n          return;\n        }\n\n        if (command === \"Refresh\") {\n          this.deviceObjects[deviceId]\n            .getDeviceInfo()\n            .then((sysInfo: any) => {\n              this.log.debug(JSON.stringify(sysInfo));\n              this.json2iob.parse(deviceId, sysInfo);\n            })\n            .catch((error) => {\n              this.log.error(`Get Device Info failed for ${deviceId} - ${error}`);\n            });\n\n          return;\n        }\n        try {\n          if (this.deviceObjects[deviceId] && this.deviceObjects[deviceId][command]) {\n            if (command === \"setColor\") {\n              const valueSplit = state.val.split(\", \");\n              const result = await this.deviceObjects[deviceId][command](valueSplit[0], valueSplit[1]);\n              this.log.info(JSON.stringify(result));\n            } else {\n              const result = await this.deviceObjects[deviceId][command](state.val);\n              this.log.info(JSON.stringify(result));\n            }\n            this.refreshTimeout && clearTimeout(this.refreshTimeout);\n            this.refreshTimeout = setTimeout(async () => {\n              await this.updateDevices();\n            }, 2 * 1000);\n          } else {\n            this.log.error(`Device ${deviceId} has no command ${command}`);\n          }\n        } catch (error) {\n          this.log.error(error);\n        }\n      } else {\n        const resultDict = { device_on: \"setPowerState\" };\n        const idArray = id.split(\".\");\n        const stateName = idArray[idArray.length - 1];\n        const deviceId = id.split(\".\")[2];\n        if (resultDict[stateName]) {\n          await this.setStateAsync(deviceId + \".remote.\" + resultDict[stateName], state.val, true);\n        }\n      }\n    }\n  }\n}\n\nif (require.main !== module) {\n  // Export the constructor in compact mode\n  module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Myenergi(options);\n} else {\n  // otherwise start the instance directly\n  (() => new Myenergi())();\n}\n"],
  "mappings": "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",
  "names": ["Json2iob"]
}
