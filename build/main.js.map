{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.3.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\n\n//@ts-nocheck\nimport * as utils from \"@iobroker/adapter-core\";\nimport Json2iob from \"./lib/json2iob\";\nimport { MyEnergi } from \"./lib/myenergi-api\";\n\nclass Myenergi extends utils.Adapter {\n  private devices: [];\n  private json2iob: Json2iob;\n  private hub: MyEnergi;\n  updateInterval: any = null;\n  reLoginTimeout: any = null;\n  refreshTokenTimeout: any = null;\n  session: any = {};\n  refreshTimeout: any;\n  refreshTokenInterval: any;\n  termId: any;\n  public constructor(options: Partial<utils.AdapterOptions> = {}) {\n    super({\n      ...options,\n      name: \"myenergi\",\n    });\n    this.on(\"ready\", this.onReady.bind(this));\n    this.on(\"stateChange\", this.onStateChange.bind(this));\n    this.on(\"unload\", this.onUnload.bind(this));\n    this.devices = {};\n\n    this.json2iob = new Json2iob(this);\n  }\n\n  /**\n   * Is called when databases are connected and adapter received configuration.\n   */\n  private async onReady(): Promise<void> {\n    this.setState(\"info.connection\", false, true);\n    if (this.config.interval < 0.5) {\n      this.log.info(\"Set interval to minimum 0.5\");\n      this.config.interval = 0.5;\n    }\n    if (!this.config.username || !this.config.password) {\n      this.log.error(\"Please set username and password in the instance settings\");\n      return;\n    }\n\n    this.updateInterval = null;\n    this.reLoginTimeout = null;\n    this.refreshTokenTimeout = null;\n    this.session = {};\n    this.subscribeStates(\"*\");\n\n    await this.getDeviceList();\n    await this.updateDevices();\n    this.updateInterval = setInterval(async () => {\n      await this.updateDevices();\n    }, this.config.interval * 1000);\n  }\n\n  async getDeviceList(): Promise<void> {\n    this.hub = new MyEnergi(this.config.username, this.config.password);\n    this.devices = await this.hub.getStatusAll().catch((error) => {\n      this.log.error(\"Error getting device list: \" + error);\n      return;\n    });\n\n    this.setState(\"info.connection\", true, true);\n    this.log.debug(JSON.stringify(this.devices));\n\n    for (const deviceObjects of this.devices) {\n      const type = Object.keys(deviceObjects)[0];\n      const deviceArray = deviceObjects[type];\n      if (typeof deviceArray !== \"object\") {\n        this.log.info(`skipping ${type}`);\n        continue;\n      }\n      this.log.info(`Found device: ${type} - ${deviceArray.length}`);\n\n      for (const device of deviceArray) {\n        device.type = type;\n        const id = device.sno.toString();\n        let name = type + \" \" + id;\n\n        await this.setObjectNotExistsAsync(id, {\n          type: \"device\",\n          common: {\n            name: name,\n          },\n          native: {},\n        });\n        await this.setObjectNotExistsAsync(id + \".remote\", {\n          type: \"channel\",\n          common: {\n            name: \"Remote Controls\",\n          },\n          native: {},\n        });\n\n        const remoteArray = [{ command: \"refresh\", name: \"True = Refresh\" }];\n        if (type === \"zappi\") {\n          remoteArray.push({\n            command: \"setZappiChargeMode\",\n            name: \"Set the current charge mode\",\n            type: \"number\",\n            role: \"value\",\n            def: 4,\n            states: {\n              1: \"Fast\",\n              2: \"Eco\",\n              3: \"EcoPlus\",\n              4: \"Off\",\n            },\n          });\n          remoteArray.push({\n            command: \"lockZappi\",\n            name: \"Unlock = 2 / Lock = 64 / Unlock = 00000010\",\n            type: \"string\",\n            role: \"value\",\n            def: \"2\",\n          });\n          remoteArray.push({\n            command: \"setZappiGreenLevel\",\n            name: \"Set minimum green level to decide how much grid power zappi uses to keep the 1.4kW minimum charge rate going.\",\n            type: \"number\",\n            role: \"value\",\n            def: 75,\n          });\n          remoteArray.push({\n            command: \"setZappiBoostMode\",\n            name: 'Boost battery [Mode, kwh, completeTime] Mode Manual 10, Mode Smart 11, Mode off 2 [10,22,\"0615\"]',\n            type: \"string\",\n            role: \"value\",\n            def: '[10,22,\"0615\"]',\n          });\n        }\n        if (type === \"eddi\") {\n          remoteArray.push({\n            command: \"setEddiMode\",\n            name: \"Set the current charge mode\",\n            type: \"number\",\n            role: \"value\",\n            def: 0,\n            states: {\n              1: \"On\",\n              0: \"Off\",\n            },\n          });\n          remoteArray.push({\n            command: \"boostMinutes\",\n            name: \"Set the minutes for setEddiBoost\",\n            type: \"number\",\n            role: \"value\",\n            def: 0,\n          });\n          remoteArray.push({\n            command: \"setEddiBoost\",\n            name: \"Boost\",\n            type: \"string\",\n            role: \"value\",\n            states: {\n              \"1-1\": \"CancelHeater1\",\n              \"1-11\": \"CancelRelay1\",\n              \"1-12\": \"CancelRelay2\",\n              \"10-1\": \"ManualHeater1\",\n              \"10-11\": \"ManualRelay1\",\n              \"10-12\": \"ManualRelay2\",\n            },\n          });\n        }\n        remoteArray.forEach((remote) => {\n          this.setObjectNotExists(id + \".remote.\" + remote.command, {\n            type: \"state\",\n            common: {\n              name: remote.name || \"\",\n              type: remote.type || \"boolean\",\n              role: remote.role || \"button\",\n              def: remote.def !== null ? remote.def : false,\n              states: remote.states || undefined,\n              write: true,\n              read: true,\n            },\n            native: {},\n          });\n        });\n        this.json2iob.parse(id, device);\n      }\n    }\n  }\n\n  async updateDevices(): Promise<void> {\n    try {\n      const devices = await this.hub.getStatusAll().catch((error) => {\n        this.log.error(\"Error getting device list: \" + error);\n        return;\n      });\n      if (!Array.isArray(devices)) {\n        return;\n      }\n      this.log.debug(JSON.stringify(devices));\n\n      for (const deviceObjects of devices) {\n        const type = Object.keys(deviceObjects)[0];\n        const deviceArray = deviceObjects[type];\n        if (typeof deviceArray !== \"object\") {\n          continue;\n        }\n\n        for (const device of deviceArray) {\n          device.type = type;\n          const id = device.sno.toString();\n          if (device.ectp1 != null && device.ectp2 != null && device.ectp3 != null) {\n            device.ectpSum = device.ectp1 + device.ectp2 + device.ectp3;\n          }\n          this.json2iob.parse(id, device);\n          const currentDate = new Date().toISOString().split(\"T\")[0];\n          let day = {};\n          let minutes = {};\n          if (type === \"zappi\") {\n            day = await this.hub.getGeneric(`/cgi-jdayhour-Z${id}-${currentDate}`).catch((error) => {\n              this.log.error(\"Error getting zappi day: \" + error);\n              return;\n            });\n            if (this.config.minuteHistory) {\n              minutes = await this.hub.getGeneric(`/cgi-jday-Z${id}-${currentDate}`).catch((error) => {\n                this.log.error(\"Error getting zappi minutes: \" + error);\n                return;\n              });\n            }\n          }\n          if (type === \"eddi\") {\n            day = await this.hub.getGeneric(`/cgi-jdayhour-E${id}-${currentDate}`).catch((error) => {\n              this.log.error(\"Error getting eddi day: \" + error);\n              return;\n            });\n\n            if (this.config.minuteHistory) {\n              minutes = await this.hub.getGeneric(`/cgi-jday-E${id}-${currentDate}`).catch((error) => {\n                this.log.error(\"Error getting eddi minutes: \" + error);\n                return;\n              });\n            }\n          }\n          day[\"U\" + id] && this.json2iob.parse(id + \".history\", day[\"U\" + id]);\n          await this.setObjectNotExistsAsync(id + \".history.hourJson\", {\n            type: \"state\",\n            common: {\n              name: \"Raw JSON History hours\",\n              write: false,\n              read: true,\n              type: \"string\",\n              role: \"json\",\n            },\n            native: {},\n          });\n          day[\"U\" + id] && this.setState(id + \".history.hourJson\", JSON.stringify(day[\"U\" + id]), true);\n          if (this.config.minuteHistory) {\n            await this.setObjectNotExistsAsync(id + \".history.minutesJson\", {\n              type: \"state\",\n              common: {\n                name: \"Raw JSON Minutes\",\n                write: false,\n                read: true,\n                type: \"string\",\n                role: \"json\",\n              },\n              native: {},\n            });\n            minutes[\"U\" + id] && this.setState(id + \".history.minutesJson\", JSON.stringify(minutes[\"U\" + id]), true);\n          }\n        }\n      }\n    } catch (error) {\n      this.log.error(error);\n    }\n  }\n\n  async sleep(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n  async refreshToken(): Promise<void> {\n    this.log.debug(\"Refresh token\");\n  }\n  /**\n   * Is called when adapter shuts down - callback has to be called under any circumstances!\n   */\n  private onUnload(callback: () => void): void {\n    try {\n      this.setState(\"info.connection\", false, true);\n      this.refreshTimeout && clearTimeout(this.refreshTimeout);\n      this.reLoginTimeout && clearTimeout(this.reLoginTimeout);\n      this.refreshTokenTimeout && clearTimeout(this.refreshTokenTimeout);\n      this.updateInterval && clearInterval(this.updateInterval);\n      this.refreshTokenInterval && clearInterval(this.refreshTokenInterval);\n\n      callback();\n    } catch (e) {\n      callback();\n    }\n  }\n\n  /**\n   * Is called if a subscribed state changes\n   */\n  private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n    if (state) {\n      if (!state.ack) {\n        const deviceId = id.split(\".\")[2];\n        const command = id.split(\".\")[4];\n        if (id.split(\".\")[3] !== \"remote\") {\n          return;\n        }\n\n        if (command === \"Refresh\") {\n          this.updateDevices();\n          return;\n        }\n        try {\n          if (command === \"setZappiBoostMode\") {\n            const valueArray = JSON.parse(state.val);\n            const result = await this.hub.setZappiBoostMode(deviceId, valueArray[0], valueArray[1], valueArray[2]);\n            this.log.info(JSON.stringify(result));\n          } else if (command === \"lockZappi\") {\n            const result = await this.hub.getGeneric(`/cgi-jlock-Z${deviceId}-${state.val}`);\n            this.log.info(JSON.stringify(result));\n          } else {\n            const result = await this.hub[command](deviceId, state.val);\n            this.log.info(JSON.stringify(result));\n          }\n          this.refreshTimeout && clearTimeout(this.refreshTimeout);\n          this.refreshTimeout = setTimeout(async () => {\n            await this.updateDevices();\n          }, 25 * 1000);\n        } catch (error) {\n          this.log.error(error);\n          this.log.error(error.stack);\n        }\n      } else {\n        const resultDict = { zmo: \"setZappiChargeMode\", mgl: \"setZappiGreenLevel\" };\n        const idArray = id.split(\".\");\n        const stateName = idArray[idArray.length - 1];\n        const deviceId = id.split(\".\")[2];\n        if (resultDict[stateName]) {\n          await this.setStateAsync(deviceId + \".remote.\" + resultDict[stateName], state.val, true);\n        }\n      }\n    }\n  }\n}\n\nif (require.main !== module) {\n  // Export the constructor in compact mode\n  module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Myenergi(options);\n} else {\n  // otherwise start the instance directly\n  (() => new Myenergi())();\n}\n"],
  "mappings": "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",
  "names": ["Json2iob"]
}
