{
  "version": 3,
  "sources": ["../../../src/lib/myenergi-api/Digest.ts"],
  "sourcesContent": ["import { IncomingMessage } from 'http';\nimport * as https from \"https\";\nimport { RequestOptions } from \"https\";\nimport { AuthDigest } from \"./AuthDigest\";\n\nexport class Digest {\n    private _authDigest?: AuthDigest;\n    private _baseUrl: URL;\n    private _maxRedirectCount: number;\n    private _maxRetryCount: number;\n\n    constructor(baseUrl: string, username: string, password: string) {\n        this._maxRedirectCount = 3\n        this._maxRetryCount = 2\n        this._baseUrl = new URL(baseUrl);\n        this._authDigest = new AuthDigest(username, password, (err) => {\n            console.error(err);\n        });\n    }\n\n    private request(options: RequestOptions, data?: unknown, retryCount = 0, redirectCount = 0): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            let resData = \"\";\n            if (!options.headers) options.headers = {};\n            options.headers.Authorization = this._authDigest?.getAuthorization(options.method as string, options.path as string);\n            const req = https.request(options, (res: IncomingMessage) => {\n                if (res.statusCode == 401) {\n                    // myenergi asn redirect handler.\n                    const myenergiAsn = res.headers[\"x_myenergi-asn\"] as string;\n                    if (myenergiAsn && myenergiAsn !== \"undefined\" && myenergiAsn !== this._baseUrl.host) {\n                        if (redirectCount > this._maxRedirectCount) {\n                            reject(`Too many redirects: ${myenergiAsn}`);\n                            return;\n                        }\n                        this._baseUrl.host = myenergiAsn;\n                        this._baseUrl.hostname = myenergiAsn;\n                        options.host = myenergiAsn;\n                        options.hostname = myenergiAsn;\n                        redirectCount++;\n                        return this.request(options, data, retryCount, redirectCount)\n                            .then((value) => {\n                                resolve(value);\n                            })\n                            .catch((resaon) => {\n                                reject(resaon);\n                            });\n                    }\n                    if (retryCount > this._maxRetryCount) {\n                        reject(\"Authentication failed\");\n                        return;\n                    }\n                    retryCount++;\n                    const wwwAuth = res.headers[\"www-authenticate\"] as string;\n                    if (!wwwAuth.startsWith(\"Digest\")) {\n                        reject(\"Unsupported authentication method. Supported authentication schemes: Digest\");\n                        return;\n                    }\n                    this._authDigest?.init(wwwAuth);\n                    if (!options.headers) options.headers = {};\n                    options.headers.Authorization = this._authDigest?.getAuthorization(options.method as string, options.path as string);\n                    return this.request(options, data, retryCount)\n                        .then((value) => {\n                            resolve(value);\n                        })\n                        .catch((resaon) => {\n                            reject(resaon);\n                        });\n                } else if (res.statusCode && res.statusCode >= 200 && res.statusCode < 300) {\n                    // myenergi asn redirect handler.\n                    const myenergiAsn = res.headers[\"x_myenergi-asn\"] as string;\n                    if (myenergiAsn && myenergiAsn !== \"undefined\" && myenergiAsn !== this._baseUrl.host) {\n                        if (redirectCount > this._maxRedirectCount) {\n                            reject(`Too many redirects: ${myenergiAsn}`);\n                            return;\n                        }\n                        this._baseUrl.host = myenergiAsn;\n                        this._baseUrl.hostname = myenergiAsn;\n                        options.host = myenergiAsn;\n                        options.hostname = myenergiAsn;\n                        redirectCount++;\n                        return this.request(options, data, retryCount, redirectCount)\n                            .then((value) => {\n                                resolve(value);\n                            })\n                            .catch((resaon) => {\n                                reject(resaon);\n                            });\n                    }\n                    // Plain 200 handling\n                    res.setEncoding(\"utf8\");\n                    res.on(\"data\", (chunk: string) => {\n                        resData += chunk;\n                    });\n                    res.on(\"end\", () => {\n                        resolve(resData);\n                    });\n                } else if (res.statusCode && res.statusCode >= 300 && res.statusCode < 400) {\n                    if (redirectCount > this._maxRedirectCount) {\n                        reject(`Too many redirects: ${res.headers[\"location\"]}`);\n                        return;\n                    }\n                    const location = res.headers[\"location\"] as string;\n                    const uri = new URL(location);\n                    if (uri.host !== this._baseUrl.host) {\n                        this._baseUrl.host = uri.host;\n                    }\n                    redirectCount++;\n                    return this.request(options, data, retryCount, redirectCount)\n                        .then((value) => {\n                            resolve(value);\n                        })\n                        .catch((resaon) => {\n                            reject(resaon);\n                        });\n                } else {\n                    console.error(\"status code failed!!\");\n                    reject(\"status code failed!!\");\n                    return;\n                }\n            });\n\n            req.on(\"error\", (e: Error) => {\n                console.error(`problem with request: ${e.message}`);\n                reject(e);\n            });\n\n            if (data) {\n                req.write(data);\n            }\n\n            req.end();\n        });\n    }\n\n    public get(requestUrl: URL, data?: unknown): Promise<string> {\n        const options: RequestOptions = {\n            hostname: this._baseUrl.hostname,\n            host: this._baseUrl.host,\n            port: this._baseUrl.port,\n            path: requestUrl.pathname,\n            method: \"GET\",\n            headers: {\n                Connection: \"Keep-Alive\",\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n                Host: requestUrl.hostname as string,\n            },\n        };\n        return this.request(options, data);\n    }\n}\n"],
  "mappings": "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",
  "names": ["_a"]
}
