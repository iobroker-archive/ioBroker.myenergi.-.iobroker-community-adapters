{
  "version": 3,
  "sources": ["../../../src/lib/myenergi-api/Digest.ts"],
  "sourcesContent": ["import { IncomingMessage } from \"http\";\nimport * as https from \"https\";\nimport { RequestOptions } from \"https\";\nimport { AuthDigest } from \"./AuthDigest\";\n\nexport class Digest {\n  private _authDigest?: AuthDigest;\n  private _baseUrl: URL;\n  private _maxRedirectCount: number;\n  private _maxRetryCount: number;\n  private _etags: { [key: string]: string } = {};\n\n  constructor(baseUrl: string, username: string, password: string) {\n    this._maxRedirectCount = 3;\n    this._maxRetryCount = 2;\n    this._baseUrl = new URL(baseUrl);\n    this._authDigest = new AuthDigest(username, password, (err) => {\n      console.error(err);\n    });\n  }\n\n  private request(options: RequestOptions, data?: unknown, retryCount = 0, redirectCount = 0): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n      let resData = \"\";\n      if (!options.headers) options.headers = {};\n      options.headers.Authorization = this._authDigest?.getAuthorization(\n        options.method as string,\n        options.path as string,\n      );\n      const etag = this._etags[options.path as string];\n      if (etag) options.headers[\"If-None-Match\"] = etag;\n\n      const req = https.request(options, (res: IncomingMessage) => {\n        if (res.statusCode == 401) {\n          // myenergi asn redirect handler.\n          const myenergiAsn = res.headers[\"x_myenergi-asn\"] as string;\n          if (myenergiAsn && myenergiAsn !== \"undefined\" && myenergiAsn !== this._baseUrl.host) {\n            if (redirectCount > this._maxRedirectCount) {\n              reject(`Too many redirects: ${myenergiAsn}`);\n              return;\n            }\n            this._baseUrl.host = myenergiAsn;\n            this._baseUrl.hostname = myenergiAsn;\n            options.host = myenergiAsn;\n            options.hostname = myenergiAsn;\n            redirectCount++;\n            return this.request(options, data, retryCount, redirectCount)\n              .then((value) => {\n                resolve(value);\n              })\n              .catch((resaon) => {\n                reject(resaon);\n              });\n          }\n          if (retryCount > this._maxRetryCount) {\n            reject(\"Authentication failed\");\n            return;\n          }\n          retryCount++;\n          const wwwAuth = res.headers[\"www-authenticate\"] as string;\n          if (!wwwAuth.startsWith(\"Digest\")) {\n            reject(\"Unsupported authentication method. Supported authentication schemes: Digest\");\n            return;\n          }\n          this._authDigest?.init(wwwAuth);\n          if (!options.headers) options.headers = {};\n          options.headers.Authorization = this._authDigest?.getAuthorization(\n            options.method as string,\n            options.path as string,\n          );\n          return this.request(options, data, retryCount)\n            .then((value) => {\n              resolve(value);\n            })\n            .catch((resaon) => {\n              reject(resaon);\n            });\n        } else if (res.statusCode && res.statusCode >= 200 && res.statusCode < 300) {\n          // myenergi asn redirect handler.\n          this._etags[options.path as string] = res.headers.etag as string;\n          const myenergiAsn = res.headers[\"x_myenergi-asn\"] as string;\n          if (myenergiAsn && myenergiAsn !== \"undefined\" && myenergiAsn !== this._baseUrl.host) {\n            if (redirectCount > this._maxRedirectCount) {\n              reject(`Too many redirects: ${myenergiAsn}`);\n              return;\n            }\n            this._baseUrl.host = myenergiAsn;\n            this._baseUrl.hostname = myenergiAsn;\n            options.host = myenergiAsn;\n            options.hostname = myenergiAsn;\n            redirectCount++;\n            return this.request(options, data, retryCount, redirectCount)\n              .then((value) => {\n                resolve(value);\n              })\n              .catch((resaon) => {\n                reject(resaon);\n              });\n          }\n          // Plain 200 handling\n          res.setEncoding(\"utf8\");\n          res.on(\"data\", (chunk: string) => {\n            resData += chunk;\n          });\n          res.on(\"end\", () => {\n            resolve(resData);\n          });\n        } else if (res.statusCode && res.statusCode >= 300 && res.statusCode < 400) {\n          if (res.statusCode == 304) {\n            resolve(\"{}\");\n            return;\n          }\n          if (redirectCount > this._maxRedirectCount) {\n            reject(`Too many redirects: ${res.headers[\"location\"]}`);\n            return;\n          }\n          const location = res.headers[\"location\"] as string;\n          const uri = new URL(location);\n          if (uri.host !== this._baseUrl.host) {\n            this._baseUrl.host = uri.host;\n          }\n          redirectCount++;\n          return this.request(options, data, retryCount, redirectCount)\n            .then((value) => {\n              resolve(value);\n            })\n            .catch((resaon) => {\n              reject(resaon);\n            });\n        } else {\n          console.error(\"status code failed!!\");\n          reject(\"status code failed!!\");\n          return;\n        }\n      });\n\n      req.on(\"error\", (e: Error) => {\n        console.error(`problem with request: ${e.message}`);\n        reject(e);\n      });\n\n      if (data) {\n        req.write(data);\n      }\n\n      req.end();\n    });\n  }\n\n  public get(requestUrl: URL, data?: unknown, _etags?: any): Promise<string> {\n    const etag = _etags ? _etags[requestUrl.href] : undefined;\n    const options: RequestOptions = {\n      hostname: this._baseUrl.hostname,\n      host: this._baseUrl.host,\n      port: this._baseUrl.port,\n      path: requestUrl.pathname,\n      method: \"GET\",\n      headers: {\n        Connection: \"Keep-Alive\",\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Host: requestUrl.hostname as string,\n      },\n    };\n    return this.request(options, data);\n  }\n}\n"],
  "mappings": "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",
  "names": ["_a"]
}
