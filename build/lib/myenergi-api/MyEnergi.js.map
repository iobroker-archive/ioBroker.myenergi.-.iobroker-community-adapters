{
  "version": 3,
  "sources": ["../../../src/lib/myenergi-api/MyEnergi.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Digest } from \"./Digest\";\nimport { AppKeyValues } from './models/AppKeyValues';\nimport { Eddi } from \"./models/Eddi\";\nimport { Harvi } from \"./models/Harvi\";\nimport { KeyValue } from './models/KeyValue';\nimport { EddiBoost, EddiMode, ZappiBoostMode, ZappiChargeMode } from \"./models/Types\";\nimport { Zappi } from \"./models/Zappi\";\n\nexport class MyEnergi {\n    private _config = {\n        username: \"\",\n        password: \"\",\n        base_url: \"https://s18.myenergi.net\",\n        eddi_url: \"/cgi-jstatus-E\",\n        zappi_url: \"/cgi-jstatus-Z\",\n        harvi_url: \"/cgi-jstatus-H\",\n        status_url: \"/cgi-jstatus-*\",\n        dayhour_url: \"/cgi-jdayhour-\",\n        zappi_mode_url: \"/cgi-zappi-mode-Z\",\n        zappi_min_green_url: \"/cgi-set-min-green-Z\",\n        eddi_mode_url: \"/cgi-eddi-mode-E\",\n        eddi_boost_url: \"/cgi-eddi-boost-E\",\n        get_app_key_url: \"/cgi-get-app-key\",\n        set_app_key_url: \"/cgi-set-app-key\",\n        //https://s18.myenergi.net/cgi-jdayhour-Znnnnnnnn-YYYY-MM-DD\n    };\n\n    private _digest: Digest;\n\n    constructor(username: string, password: string, apiBaseUrl?: string) {\n        this._config.username = username;\n        this._config.password = password;\n        if (apiBaseUrl)\n            this._config.base_url = apiBaseUrl;\n        this._digest = new Digest(this._config.base_url, this._config.username, this._config.password);\n    }\n\n    public async getStatusAll(): Promise<any> {\n        try {\n            const data = await this._digest.get(new URL(this._config.status_url, this._config.base_url)) as string;\n            const jsonData = JSON.parse(data);\n            return jsonData;\n        } catch (error) {\n            return [];\n        }\n    }\n\n    public async getStatusZappiAll(): Promise<Zappi[]> {\n        try {\n            const data = await this._digest.get(new URL(this._config.zappi_url, this._config.base_url)) as string;\n            const jsonData = JSON.parse(data);\n            if (jsonData.zappi) return Object.assign<Zappi[], unknown>([] as Zappi[], jsonData.zappi);\n            else return [] as Zappi[];\n\n        } catch (error) {\n            return [] as Zappi[];\n        }\n    }\n\n    public async getStatusZappi(serialNumber: string): Promise<Zappi | null> {\n        try {\n            const data = await this._digest.get(new URL(this._config.zappi_url, this._config.base_url)) as string;\n            const jsonData = JSON.parse(data);\n            if (jsonData.zappi) {\n                const zappi = (Object.assign<Zappi[], unknown>([] as Zappi[], jsonData.zappi) as Zappi[]).find((zappi) => {\n                    return zappi.sno == serialNumber;\n                });\n                if (zappi) return Object.assign<Zappi, unknown>({} as Zappi, zappi);\n                else return null;\n            } else return null;\n        } catch (error) {\n            return null;\n        }\n    }\n\n    public async setZappiChargeMode(serialNo: string, chargeMode: ZappiChargeMode): Promise<any> {\n        try {\n            const url = new URL(`${this._config.zappi_mode_url}${serialNo}-${chargeMode}-0-0-0000`, this._config.base_url);\n            const data = await this._digest.get(url);\n            const jsonData = JSON.parse(data);\n            return jsonData;\n        } catch (error) {\n            return {};\n        }\n    }\n\n    public async setZappiBoostMode(serialNo: string, boostMode: ZappiBoostMode, kwh = 0, completeTime = \"0000\"): Promise<any> {\n        try {\n            if (boostMode === ZappiBoostMode.Stop) {\n                kwh = 0;\n                completeTime = \"0000\";\n            }\n            const url = new URL(`${this._config.zappi_mode_url}${serialNo}-0-${boostMode}-${kwh}-${completeTime}`, this._config.base_url);\n            const data = await this._digest.get(url);\n            const jsonData = JSON.parse(data);\n            return jsonData;\n        } catch (error) {\n            return {};\n        }\n    }\n\n    public async setZappiGreenLevel(serialNo: string, percentage: number): Promise<any> {\n        try {\n            const url = new URL(`${this._config.zappi_min_green_url}${serialNo}-${percentage}`, this._config.base_url);\n            const data = await this._digest.get(url);\n            const jsonData = JSON.parse(data);\n            return jsonData;\n        } catch (error) {\n            return {};\n        }\n    }\n\n    public async getStatusEddiAll(): Promise<Eddi[]> {\n        try {\n            const data = await this._digest.get(new URL(this._config.eddi_url, this._config.base_url));\n            const jsonData = JSON.parse(data);\n            if (jsonData.eddi) return Object.assign<Eddi[], unknown>([] as Eddi[], jsonData.eddi);\n            else return [] as Eddi[];\n        } catch (error) {\n            return [] as Eddi[];\n        }\n    }\n\n    public async getStatusEddi(serialNumber: string): Promise<Eddi | null> {\n        try {\n            const data = await this._digest.get(new URL(this._config.eddi_url, this._config.base_url));\n            const jsonData = JSON.parse(data);\n            if (jsonData.eddi) {\n                const eddi = (Object.assign<Eddi[], unknown>([] as Eddi[], jsonData.eddi) as Eddi[]).find((eddi) => {\n                    return eddi.sno == serialNumber;\n                });\n                if (eddi) return Object.assign<Eddi, unknown>({} as Eddi, eddi);\n                else return null;\n            } else return null;\n        } catch (error) {\n            return null;\n        }\n    }\n\n    public async setEddiMode(serialNo: string, mode: EddiMode): Promise<any> {\n        try {\n            const url = new URL(`${this._config.eddi_mode_url}${serialNo}-${mode}`, this._config.base_url);\n            const data = await this._digest.get(url);\n            const jsonData = JSON.parse(data);\n            return jsonData;\n        } catch (error) {\n            return {};\n        }\n    }\n\n    public async setEddiBoost(serialNo: string, boost: EddiBoost, minutes = 0): Promise<any> {\n        try {\n            const url = new URL(`${this._config.eddi_boost_url}${serialNo}-${boost}-${minutes}`, this._config.base_url);\n            const data = await this._digest.get(url);\n            const jsonData = JSON.parse(data);\n            return jsonData;\n        } catch (error) {\n            return {};\n        }\n    }\n\n    public async getStatusHarviAll(): Promise<Harvi[]> {\n        try {\n            const data = await this._digest.get(new URL(this._config.harvi_url, this._config.base_url));\n            const jsonData = JSON.parse(data);\n            if (jsonData.harvi) return Object.assign<Harvi[], unknown>([] as Harvi[], jsonData.harvi);\n            else return [] as Harvi[];\n        } catch (error) {\n            return [] as Harvi[];\n        }\n    }\n\n    public async getStatusHarvi(serialNumber: string): Promise<Harvi | null> {\n        try {\n            const data = await this._digest.get(new URL(this._config.harvi_url, this._config.base_url));\n            const jsonData = JSON.parse(data);\n            if (jsonData.harvi) {\n                const harvi = (Object.assign<Harvi[], unknown>([] as Harvi[], jsonData.harvi) as Harvi[]).find((harvi) => {\n                    return harvi.sno == serialNumber;\n                });\n                if (harvi) return Object.assign<Harvi, unknown>({} as Harvi, harvi);\n                else return null;\n            } else return null;\n        } catch (error) {\n            return null;\n        }\n    }\n\n    public async getAppKeyFull(key: string): Promise<AppKeyValues | null> {\n        try {\n            const data = await this._digest.get(new URL(`${this._config.get_app_key_url}-${key}`, this._config.base_url));\n            const jsonData = JSON.parse(data);\n            if (jsonData) {\n                const result = Object.assign<AppKeyValues, unknown>({} as AppKeyValues, jsonData);\n                return result;\n            }\n        } catch (error) {\n            return null;\n        }\n        return null;\n    }\n\n    public async getAppKey(key: string): Promise<KeyValue[] | null> {\n        try {\n            const data = await this._digest.get(new URL(`${this._config.get_app_key_url}-${key}`, this._config.base_url));\n            const jsonData = JSON.parse(data);\n            if (jsonData) {\n                const result = Object.assign<AppKeyValues, unknown>({} as AppKeyValues, jsonData);\n                if (result[Object.keys(result)[0]])\n                    return result[Object.keys(result)[0]];\n            }\n        } catch (error) {\n            return null;\n        }\n        return null;\n    }\n\n    public async setAppKey(key: string, val: string): Promise<KeyValue[] | null> {\n        try {\n            const data = await this._digest.get(new URL(`${this._config.set_app_key_url}-${key}=${val}`, this._config.base_url));\n            const jsonData = JSON.parse(data);\n            if (jsonData) {\n                const result = Object.assign<AppKeyValues, unknown>({} as AppKeyValues, jsonData);\n                if (result[Object.keys(result)[0]])\n                    return result[Object.keys(result)[0]];\n            }\n        } catch (error) {\n            return null;\n        }\n        return null;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,oBAAuB;AAKvB,mBAAqE;AAG9D,MAAM,SAAS;AAAA,EAqBlB,YAAY,UAAkB,UAAkB,YAAqB;AApBrE,SAAQ,UAAU;AAAA,MACd,UAAU;AAAA,MACV,UAAU;AAAA,MACV,UAAU;AAAA,MACV,UAAU;AAAA,MACV,WAAW;AAAA,MACX,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,gBAAgB;AAAA,MAChB,qBAAqB;AAAA,MACrB,eAAe;AAAA,MACf,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,IAErB;AAKI,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,WAAW;AACxB,QAAI;AACA,WAAK,QAAQ,WAAW;AAC5B,SAAK,UAAU,IAAI,qBAAO,KAAK,QAAQ,UAAU,KAAK,QAAQ,UAAU,KAAK,QAAQ,QAAQ;AAAA,EACjG;AAAA,EAEA,MAAa,eAA6B;AACtC,QAAI;AACA,YAAM,OAAO,MAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,KAAK,QAAQ,YAAY,KAAK,QAAQ,QAAQ,CAAC;AAC3F,YAAM,WAAW,KAAK,MAAM,IAAI;AAChC,aAAO;AAAA,IACX,SAAS,OAAP;AACE,aAAO,CAAC;AAAA,IACZ;AAAA,EACJ;AAAA,EAEA,MAAa,oBAAsC;AAC/C,QAAI;AACA,YAAM,OAAO,MAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,KAAK,QAAQ,WAAW,KAAK,QAAQ,QAAQ,CAAC;AAC1F,YAAM,WAAW,KAAK,MAAM,IAAI;AAChC,UAAI,SAAS;AAAO,eAAO,OAAO,OAAyB,CAAC,GAAc,SAAS,KAAK;AAAA;AACnF,eAAO,CAAC;AAAA,IAEjB,SAAS,OAAP;AACE,aAAO,CAAC;AAAA,IACZ;AAAA,EACJ;AAAA,EAEA,MAAa,eAAe,cAA6C;AACrE,QAAI;AACA,YAAM,OAAO,MAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,KAAK,QAAQ,WAAW,KAAK,QAAQ,QAAQ,CAAC;AAC1F,YAAM,WAAW,KAAK,MAAM,IAAI;AAChC,UAAI,SAAS,OAAO;AAChB,cAAM,QAAS,OAAO,OAAyB,CAAC,GAAc,SAAS,KAAK,EAAc,KAAK,CAACA,WAAU;AACtG,iBAAOA,OAAM,OAAO;AAAA,QACxB,CAAC;AACD,YAAI;AAAO,iBAAO,OAAO,OAAuB,CAAC,GAAY,KAAK;AAAA;AAC7D,iBAAO;AAAA,MAChB;AAAO,eAAO;AAAA,IAClB,SAAS,OAAP;AACE,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,MAAa,mBAAmB,UAAkB,YAA2C;AACzF,QAAI;AACA,YAAM,MAAM,IAAI,IAAI,GAAG,KAAK,QAAQ,iBAAiB,YAAY,uBAAuB,KAAK,QAAQ,QAAQ;AAC7G,YAAM,OAAO,MAAM,KAAK,QAAQ,IAAI,GAAG;AACvC,YAAM,WAAW,KAAK,MAAM,IAAI;AAChC,aAAO;AAAA,IACX,SAAS,OAAP;AACE,aAAO,CAAC;AAAA,IACZ;AAAA,EACJ;AAAA,EAEA,MAAa,kBAAkB,UAAkB,WAA2B,MAAM,GAAG,eAAe,QAAsB;AACtH,QAAI;AACA,UAAI,cAAc,4BAAe,MAAM;AACnC,cAAM;AACN,uBAAe;AAAA,MACnB;AACA,YAAM,MAAM,IAAI,IAAI,GAAG,KAAK,QAAQ,iBAAiB,cAAc,aAAa,OAAO,gBAAgB,KAAK,QAAQ,QAAQ;AAC5H,YAAM,OAAO,MAAM,KAAK,QAAQ,IAAI,GAAG;AACvC,YAAM,WAAW,KAAK,MAAM,IAAI;AAChC,aAAO;AAAA,IACX,SAAS,OAAP;AACE,aAAO,CAAC;AAAA,IACZ;AAAA,EACJ;AAAA,EAEA,MAAa,mBAAmB,UAAkB,YAAkC;AAChF,QAAI;AACA,YAAM,MAAM,IAAI,IAAI,GAAG,KAAK,QAAQ,sBAAsB,YAAY,cAAc,KAAK,QAAQ,QAAQ;AACzG,YAAM,OAAO,MAAM,KAAK,QAAQ,IAAI,GAAG;AACvC,YAAM,WAAW,KAAK,MAAM,IAAI;AAChC,aAAO;AAAA,IACX,SAAS,OAAP;AACE,aAAO,CAAC;AAAA,IACZ;AAAA,EACJ;AAAA,EAEA,MAAa,mBAAoC;AAC7C,QAAI;AACA,YAAM,OAAO,MAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,KAAK,QAAQ,UAAU,KAAK,QAAQ,QAAQ,CAAC;AACzF,YAAM,WAAW,KAAK,MAAM,IAAI;AAChC,UAAI,SAAS;AAAM,eAAO,OAAO,OAAwB,CAAC,GAAa,SAAS,IAAI;AAAA;AAC/E,eAAO,CAAC;AAAA,IACjB,SAAS,OAAP;AACE,aAAO,CAAC;AAAA,IACZ;AAAA,EACJ;AAAA,EAEA,MAAa,cAAc,cAA4C;AACnE,QAAI;AACA,YAAM,OAAO,MAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,KAAK,QAAQ,UAAU,KAAK,QAAQ,QAAQ,CAAC;AACzF,YAAM,WAAW,KAAK,MAAM,IAAI;AAChC,UAAI,SAAS,MAAM;AACf,cAAM,OAAQ,OAAO,OAAwB,CAAC,GAAa,SAAS,IAAI,EAAa,KAAK,CAACC,UAAS;AAChG,iBAAOA,MAAK,OAAO;AAAA,QACvB,CAAC;AACD,YAAI;AAAM,iBAAO,OAAO,OAAsB,CAAC,GAAW,IAAI;AAAA;AACzD,iBAAO;AAAA,MAChB;AAAO,eAAO;AAAA,IAClB,SAAS,OAAP;AACE,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,MAAa,YAAY,UAAkB,MAA8B;AACrE,QAAI;AACA,YAAM,MAAM,IAAI,IAAI,GAAG,KAAK,QAAQ,gBAAgB,YAAY,QAAQ,KAAK,QAAQ,QAAQ;AAC7F,YAAM,OAAO,MAAM,KAAK,QAAQ,IAAI,GAAG;AACvC,YAAM,WAAW,KAAK,MAAM,IAAI;AAChC,aAAO;AAAA,IACX,SAAS,OAAP;AACE,aAAO,CAAC;AAAA,IACZ;AAAA,EACJ;AAAA,EAEA,MAAa,aAAa,UAAkB,OAAkB,UAAU,GAAiB;AACrF,QAAI;AACA,YAAM,MAAM,IAAI,IAAI,GAAG,KAAK,QAAQ,iBAAiB,YAAY,SAAS,WAAW,KAAK,QAAQ,QAAQ;AAC1G,YAAM,OAAO,MAAM,KAAK,QAAQ,IAAI,GAAG;AACvC,YAAM,WAAW,KAAK,MAAM,IAAI;AAChC,aAAO;AAAA,IACX,SAAS,OAAP;AACE,aAAO,CAAC;AAAA,IACZ;AAAA,EACJ;AAAA,EAEA,MAAa,oBAAsC;AAC/C,QAAI;AACA,YAAM,OAAO,MAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,KAAK,QAAQ,WAAW,KAAK,QAAQ,QAAQ,CAAC;AAC1F,YAAM,WAAW,KAAK,MAAM,IAAI;AAChC,UAAI,SAAS;AAAO,eAAO,OAAO,OAAyB,CAAC,GAAc,SAAS,KAAK;AAAA;AACnF,eAAO,CAAC;AAAA,IACjB,SAAS,OAAP;AACE,aAAO,CAAC;AAAA,IACZ;AAAA,EACJ;AAAA,EAEA,MAAa,eAAe,cAA6C;AACrE,QAAI;AACA,YAAM,OAAO,MAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,KAAK,QAAQ,WAAW,KAAK,QAAQ,QAAQ,CAAC;AAC1F,YAAM,WAAW,KAAK,MAAM,IAAI;AAChC,UAAI,SAAS,OAAO;AAChB,cAAM,QAAS,OAAO,OAAyB,CAAC,GAAc,SAAS,KAAK,EAAc,KAAK,CAACC,WAAU;AACtG,iBAAOA,OAAM,OAAO;AAAA,QACxB,CAAC;AACD,YAAI;AAAO,iBAAO,OAAO,OAAuB,CAAC,GAAY,KAAK;AAAA;AAC7D,iBAAO;AAAA,MAChB;AAAO,eAAO;AAAA,IAClB,SAAS,OAAP;AACE,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,MAAa,cAAc,KAA2C;AAClE,QAAI;AACA,YAAM,OAAO,MAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,GAAG,KAAK,QAAQ,mBAAmB,OAAO,KAAK,QAAQ,QAAQ,CAAC;AAC5G,YAAM,WAAW,KAAK,MAAM,IAAI;AAChC,UAAI,UAAU;AACV,cAAM,SAAS,OAAO,OAA8B,CAAC,GAAmB,QAAQ;AAChF,eAAO;AAAA,MACX;AAAA,IACJ,SAAS,OAAP;AACE,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EAEA,MAAa,UAAU,KAAyC;AAC5D,QAAI;AACA,YAAM,OAAO,MAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,GAAG,KAAK,QAAQ,mBAAmB,OAAO,KAAK,QAAQ,QAAQ,CAAC;AAC5G,YAAM,WAAW,KAAK,MAAM,IAAI;AAChC,UAAI,UAAU;AACV,cAAM,SAAS,OAAO,OAA8B,CAAC,GAAmB,QAAQ;AAChF,YAAI,OAAO,OAAO,KAAK,MAAM,EAAE;AAC3B,iBAAO,OAAO,OAAO,KAAK,MAAM,EAAE;AAAA,MAC1C;AAAA,IACJ,SAAS,OAAP;AACE,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EAEA,MAAa,UAAU,KAAa,KAAyC;AACzE,QAAI;AACA,YAAM,OAAO,MAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,GAAG,KAAK,QAAQ,mBAAmB,OAAO,OAAO,KAAK,QAAQ,QAAQ,CAAC;AACnH,YAAM,WAAW,KAAK,MAAM,IAAI;AAChC,UAAI,UAAU;AACV,cAAM,SAAS,OAAO,OAA8B,CAAC,GAAmB,QAAQ;AAChF,YAAI,OAAO,OAAO,KAAK,MAAM,EAAE;AAC3B,iBAAO,OAAO,OAAO,KAAK,MAAM,EAAE;AAAA,MAC1C;AAAA,IACJ,SAAS,OAAP;AACE,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AACJ;",
  "names": ["zappi", "eddi", "harvi"]
}
