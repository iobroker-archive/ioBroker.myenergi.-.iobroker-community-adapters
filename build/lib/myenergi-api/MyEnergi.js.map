{
  "version": 3,
  "sources": ["../../../src/lib/myenergi-api/MyEnergi.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Digest } from \"./Digest\";\nimport { AppKeyValues } from \"./models/AppKeyValues\";\nimport { Eddi } from \"./models/Eddi\";\nimport { Harvi } from \"./models/Harvi\";\nimport { KeyValue } from \"./models/KeyValue\";\nimport { EddiBoost, EddiMode, ZappiBoostMode, ZappiChargeMode } from \"./models/Types\";\nimport { Zappi } from \"./models/Zappi\";\n\nexport class MyEnergi {\n  private _config = {\n    username: \"\",\n    password: \"\",\n    base_url: \"https://s18.myenergi.net\",\n    eddi_url: \"/cgi-jstatus-E\",\n    zappi_url: \"/cgi-jstatus-Z\",\n    harvi_url: \"/cgi-jstatus-H\",\n    status_url: \"/cgi-jstatus-*\",\n    dayhour_url: \"/cgi-jdayhour-\",\n    zappi_day_url: \"/cgi-jdayhour-Z\",\n    eddi_day_url: \"/cgi-jdayhour-E\",\n    zappi_mode_url: \"/cgi-zappi-mode-Z\",\n    zappi_min_green_url: \"/cgi-set-min-green-Z\",\n    eddi_mode_url: \"/cgi-eddi-mode-E\",\n    eddi_boost_url: \"/cgi-eddi-boost-E\",\n    get_app_key_url: \"/cgi-get-app-key\",\n    set_app_key_url: \"/cgi-set-app-key\",\n    //https://s18.myenergi.net/cgi-jdayhour-Znnnnnnnn-YYYY-MM-DD\n  };\n\n  private _digest: Digest;\n\n  constructor(username: string, password: string, apiBaseUrl?: string) {\n    this._config.username = username;\n    this._config.password = password;\n    if (apiBaseUrl) this._config.base_url = apiBaseUrl;\n    this._digest = new Digest(this._config.base_url, this._config.username, this._config.password);\n  }\n\n  public async getStatusAll(): Promise<any> {\n    try {\n      const data = (await this._digest.get(new URL(this._config.status_url, this._config.base_url))) as string;\n      const jsonData = JSON.parse(data);\n      return jsonData;\n    } catch (error) {\n      return [];\n    }\n  }\n\n  public async getGeneric(path: string): Promise<any> {\n    try {\n      const data = (await this._digest.get(new URL(`${path}`, this._config.base_url))) as string;\n      const jsonData = JSON.parse(data);\n      return jsonData;\n    } catch (error) {\n      return [];\n    }\n  }\n\n  public async getStatusZappiAll(): Promise<Zappi[]> {\n    try {\n      const data = (await this._digest.get(new URL(this._config.zappi_url, this._config.base_url))) as string;\n      const jsonData = JSON.parse(data);\n      if (jsonData.zappi) return Object.assign<Zappi[], unknown>([] as Zappi[], jsonData.zappi);\n      else return [] as Zappi[];\n    } catch (error) {\n      return [] as Zappi[];\n    }\n  }\n\n  public async getStatusZappi(serialNumber: string): Promise<Zappi | null> {\n    try {\n      const data = (await this._digest.get(new URL(this._config.zappi_url, this._config.base_url))) as string;\n      const jsonData = JSON.parse(data);\n      if (jsonData.zappi) {\n        const zappi = (Object.assign<Zappi[], unknown>([] as Zappi[], jsonData.zappi) as Zappi[]).find((zappi) => {\n          return zappi.sno == serialNumber;\n        });\n        if (zappi) return Object.assign<Zappi, unknown>({} as Zappi, zappi);\n        else return null;\n      } else return null;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  public async setZappiChargeMode(serialNo: string, chargeMode: ZappiChargeMode): Promise<any> {\n    try {\n      const url = new URL(`${this._config.zappi_mode_url}${serialNo}-${chargeMode}-0-0-0000`, this._config.base_url);\n      const data = await this._digest.get(url);\n      const jsonData = JSON.parse(data);\n      return jsonData;\n    } catch (error) {\n      return {};\n    }\n  }\n\n  public async setZappiBoostMode(\n    serialNo: string,\n    boostMode: ZappiBoostMode,\n    kwh = 0,\n    completeTime = \"0000\",\n  ): Promise<any> {\n    try {\n      if (boostMode === ZappiBoostMode.Stop) {\n        kwh = 0;\n        completeTime = \"0000\";\n      }\n      const url = new URL(\n        `${this._config.zappi_mode_url}${serialNo}-0-${boostMode}-${kwh}-${completeTime}`,\n        this._config.base_url,\n      );\n      const data = await this._digest.get(url);\n      const jsonData = JSON.parse(data);\n      return jsonData;\n    } catch (error) {\n      return {};\n    }\n  }\n\n  public async setZappiGreenLevel(serialNo: string, percentage: number): Promise<any> {\n    try {\n      const url = new URL(`${this._config.zappi_min_green_url}${serialNo}-${percentage}`, this._config.base_url);\n      const data = await this._digest.get(url);\n      const jsonData = JSON.parse(data);\n      return jsonData;\n    } catch (error) {\n      return {};\n    }\n  }\n\n  public async getStatusEddiAll(): Promise<Eddi[]> {\n    try {\n      const data = await this._digest.get(new URL(this._config.eddi_url, this._config.base_url));\n      const jsonData = JSON.parse(data);\n      if (jsonData.eddi) return Object.assign<Eddi[], unknown>([] as Eddi[], jsonData.eddi);\n      else return [] as Eddi[];\n    } catch (error) {\n      return [] as Eddi[];\n    }\n  }\n\n  public async getStatusEddi(serialNumber: string): Promise<Eddi | null> {\n    try {\n      const data = await this._digest.get(new URL(this._config.eddi_url, this._config.base_url));\n      const jsonData = JSON.parse(data);\n      if (jsonData.eddi) {\n        const eddi = (Object.assign<Eddi[], unknown>([] as Eddi[], jsonData.eddi) as Eddi[]).find((eddi) => {\n          return eddi.sno == serialNumber;\n        });\n        if (eddi) return Object.assign<Eddi, unknown>({} as Eddi, eddi);\n        else return null;\n      } else return null;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  public async setEddiMode(serialNo: string, mode: EddiMode): Promise<any> {\n    try {\n      const url = new URL(`${this._config.eddi_mode_url}${serialNo}-${mode}`, this._config.base_url);\n      const data = await this._digest.get(url);\n      const jsonData = JSON.parse(data);\n      return jsonData;\n    } catch (error) {\n      return {};\n    }\n  }\n\n  public async setEddiBoost(serialNo: string, boost: EddiBoost, minutes = 0): Promise<any> {\n    try {\n      const url = new URL(`${this._config.eddi_boost_url}${serialNo}-${boost}-${minutes}`, this._config.base_url);\n      const data = await this._digest.get(url);\n      const jsonData = JSON.parse(data);\n      return jsonData;\n    } catch (error) {\n      return {};\n    }\n  }\n\n  public async getStatusHarviAll(): Promise<Harvi[]> {\n    try {\n      const data = await this._digest.get(new URL(this._config.harvi_url, this._config.base_url));\n      const jsonData = JSON.parse(data);\n      if (jsonData.harvi) return Object.assign<Harvi[], unknown>([] as Harvi[], jsonData.harvi);\n      else return [] as Harvi[];\n    } catch (error) {\n      return [] as Harvi[];\n    }\n  }\n\n  public async getStatusHarvi(serialNumber: string): Promise<Harvi | null> {\n    try {\n      const data = await this._digest.get(new URL(this._config.harvi_url, this._config.base_url));\n      const jsonData = JSON.parse(data);\n      if (jsonData.harvi) {\n        const harvi = (Object.assign<Harvi[], unknown>([] as Harvi[], jsonData.harvi) as Harvi[]).find((harvi) => {\n          return harvi.sno == serialNumber;\n        });\n        if (harvi) return Object.assign<Harvi, unknown>({} as Harvi, harvi);\n        else return null;\n      } else return null;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  public async getAppKeyFull(key: string): Promise<AppKeyValues | null> {\n    try {\n      const data = await this._digest.get(new URL(`${this._config.get_app_key_url}-${key}`, this._config.base_url));\n      const jsonData = JSON.parse(data);\n      if (jsonData) {\n        const result = Object.assign<AppKeyValues, unknown>({} as AppKeyValues, jsonData);\n        return result;\n      }\n    } catch (error) {\n      return null;\n    }\n    return null;\n  }\n\n  public async getAppKey(key: string): Promise<KeyValue[] | null> {\n    try {\n      const data = await this._digest.get(new URL(`${this._config.get_app_key_url}-${key}`, this._config.base_url));\n      const jsonData = JSON.parse(data);\n      if (jsonData) {\n        const result = Object.assign<AppKeyValues, unknown>({} as AppKeyValues, jsonData);\n        if (result[Object.keys(result)[0]]) return result[Object.keys(result)[0]];\n      }\n    } catch (error) {\n      return null;\n    }\n    return null;\n  }\n\n  public async setAppKey(key: string, val: string): Promise<KeyValue[] | null> {\n    try {\n      const data = await this._digest.get(\n        new URL(`${this._config.set_app_key_url}-${key}=${val}`, this._config.base_url),\n      );\n      const jsonData = JSON.parse(data);\n      if (jsonData) {\n        const result = Object.assign<AppKeyValues, unknown>({} as AppKeyValues, jsonData);\n        if (result[Object.keys(result)[0]]) return result[Object.keys(result)[0]];\n      }\n    } catch (error) {\n      return null;\n    }\n    return null;\n  }\n}\n"],
  "mappings": "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",
  "names": ["zappi", "eddi", "harvi"]
}
