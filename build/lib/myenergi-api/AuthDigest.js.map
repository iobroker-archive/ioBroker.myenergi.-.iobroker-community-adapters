{
  "version": 3,
  "sources": ["../../../src/lib/myenergi-api/AuthDigest.ts"],
  "sourcesContent": ["import * as crypto from \"crypto\";\n\nexport class AuthDigest {\n    private _password?: string | undefined;\n    private _username?: string | undefined;\n    private _initialized: boolean;\n    private _onError?: (errorMessage: string) => void;\n\n    public get username(): string | undefined {\n        return this._username;\n    }\n    private _realm?: string | undefined;\n    public get realm(): string | undefined {\n        return this._realm;\n    }\n    private _nonce?: string | undefined;\n    public get nonce(): string | undefined {\n        return this._nonce;\n    }\n    private _uri?: string | undefined;\n    public get uri(): string | undefined {\n        return this._uri;\n    }\n    private _algorithm: string;\n    public get algorithm(): string {\n        return this._algorithm;\n    }\n    private _response?: string | undefined;\n    public get response(): string | undefined {\n        return this._response;\n    }\n    private _opaque?: string | undefined;\n    public get opaque(): string | undefined {\n        return this._opaque;\n    }\n    private _qop?: string | undefined;\n    public get qop(): string | undefined {\n        return this._qop;\n    }\n    private _nc: number;\n    public get nc(): string | undefined {\n        this._nc++;\n        const myHex = (\"0000000\" + this._nc?.toString(16)).substr(-8);\n        return myHex;\n    }\n    private _cnonce?: string | undefined;\n    public get cnonce(): string | undefined {\n        this._cnonce = this.md5(String(new Date().getTime()));\n        return this._cnonce;\n    }\n\n    private md5(data: string) {\n        const md5 = crypto.createHash(\"md5\");\n        const result = md5.update(data).digest(\"hex\");\n        return result;\n    }\n\n    constructor(username: string, password: string, errorHandler?: (errorMessage: string) => void) {\n        this._username = username;\n        this._password = password;\n        this._nc = 0;\n        this._initialized = false;\n        this._algorithm = \"MD5\";\n        if (errorHandler) this._onError = errorHandler;\n    }\n\n    public init(wwwAuthHeader: string) {\n\n        if (!wwwAuthHeader)\n            return;\n\n        const authSplit = wwwAuthHeader.split(\",\") as string[];\n\n        for (const item of authSplit) {\n            if (item && item.indexOf(\"realm=\") >= 0) {\n                const realmSplit = item.split('=\"');\n                this._realm = realmSplit[realmSplit.length - 1];\n                this._realm = this._realm.substring(0, this._realm.length - 1);\n            }\n\n            if (item && item.indexOf(\"nonce=\") >= 0) {\n                const nonceSplit = item.split('=\"');\n                this._nonce = nonceSplit[nonceSplit.length - 1];\n                this._nonce = this._nonce.substring(0, this._nonce.length - 1);\n            }\n\n            if (item && item.indexOf(\"qop=\") >= 0) {\n                const qopSplit = item.split('=\"');\n                this._qop = qopSplit[qopSplit.length - 1];\n                this._qop = this._qop.substring(0, this._qop.length - 1);\n            }\n\n            if (item && item.indexOf(\"opaque=\") >= 0) {\n                const opaqueSplit = item.split('=\"');\n                this._opaque = opaqueSplit[opaqueSplit.length - 1];\n                this._opaque = this._opaque.substring(0, this._opaque.length - 1);\n            }\n\n            if (item && item.indexOf(\"algorithm=\") >= 0) {\n                const algorithmSplit = item.split(\"=\");\n                this._algorithm = algorithmSplit[algorithmSplit.length - 1];\n                this._algorithm = this._algorithm.substring(0, this._algorithm.length);\n                if (this._onError && this.algorithm !== \"MD5\") {\n                    this._onError(`Algorithm ${this.algorithm} is not supported. Only MD5 is supportet`);\n                }\n            }\n        }\n        this._initialized = true;\n    }\n\n    public getAuthorization(httpMethod: string, path: string): string {\n        if (!this._initialized) return \"\";\n\n        const nc = this.nc;\n        const cnonce = this.cnonce;\n        const HA1 = this.md5(this.username + \":\" + this.realm + \":\" + this._password);\n        const HA2 = this.md5(httpMethod + \":\" + path);\n        const response = this.md5(HA1 + \":\" + this.nonce + \":\" + nc + \":\" + cnonce + \":\" + this.qop + \":\" + HA2);\n\n        let res = `Digest username=\"${this.username}\",`;\n        res += `realm=\"${this.realm}\",`;\n        res += `nonce=\"${this.nonce}\",`;\n        res += `uri=\"${path}\",`;\n        res += `cnonce=\"${cnonce}\",`;\n        res += `nc=${nc},`;\n        res += `algorithm=${this.algorithm},`;\n        res += `response=\"${response}\",`;\n        res += `qop=\"${this.qop}\",`;\n        res += `opaque=\"${this.opaque}\"`;\n        return res;\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
